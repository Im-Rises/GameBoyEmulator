int Cpu::binaryAddition16bits(const int& value1, const int& value2, bool& carryBit11, bool& carryBit15)
{
	int value1Temp = value1;
	int value2Temp = value2;
	bool carryTemp = 0;
	int calcResultTemp = 0;

	int additionValue = 0;

	for (int i = 0; i < 16; i++)
	{
		value1Temp = (value1 >> i) & 0b1;
		value2Temp = (value2 >> i) & 0b1;

		calcResultTemp = (value1Temp ^ value2Temp) ^ carryTemp;
		carryTemp = (value1Temp & value2Temp) | (value1Temp & carryTemp) | (value2Temp & carryTemp);

		if ((i == 11) && carryTemp)
			carryBit11 = 1;

		if ((i == 15) && carryTemp)
			carryBit15 = 1;

		additionValue += calcResultTemp << i;
	}

	return additionValue;
}


int Cpu::binaryAddition(const int& numberOfBits, const int& value1, const int& value2, bool& carryBit3, bool& carryBit7)
{
	int value1Temp = value1;
	int value2Temp = value2;
	bool carryTemp = 0;
	int calcResultTemp = 0;

	int additionValue = 0;

	for (int i = 0; i < numberOfBits; i++)
	{
		value1Temp = (value1 >> i) & 0b1;
		value2Temp = (value2 >> i) & 0b1;

		calcResultTemp = (value1Temp ^ value2Temp) ^ (carryTemp & 0x1);
		carryTemp = (value1Temp & value2Temp) | (value1Temp & (carryTemp & 0x1)) | (value2Temp & (carryTemp & 0x1));

		if ((i == 3) && carryTemp)
			carryBit3 = 1;

		if ((i == 7) && carryTemp)
			carryBit7 = 1;

		additionValue += calcResultTemp << i;
	}

	return additionValue;
}


int Cpu::binarySubstraction(const int& numberOfBits, const int& value1, const int& value2, bool& borrowBit3, bool& borrowBit7)
{
	int value1Temp = value1;
	int value2Temp = value2;
	bool carryTemp = 0;
	int calcResultTemp = 0;

	int substractionValue = 0;

	for (int i = 0; i < numberOfBits; i++)
	{
		value1Temp = (value1 >> i) & 0b1;
		value2Temp = (value2 >> i) & 0b1;

		calcResultTemp = (value1Temp ^ value2Temp) ^ (carryTemp & 0x1);
		carryTemp = ((!(value1Temp ^ value2Temp)) & carryTemp) || (((!value1Temp) & value2Temp) & (!carryTemp));

		if ((i == 3) && carryTemp)
			borrowBit3 = 1;

		if ((i == 7) && carryTemp)
			borrowBit7 = 1;

		substractionValue += calcResultTemp << i;
	}

	return substractionValue;
}


